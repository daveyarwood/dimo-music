(page "index.html"
  (:require [mantra.core :as m]
            [dimo.kinect :refer (depth-map-cell)]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(def depth-map (depth-map-cell))

; (defc= average-depth
;   (when depth-map
;     (/ (reduce + depth-map) (count depth-map))))

(defc= closest-depth
  (when depth-map
    (apply min (filter (partial not= 2047) depth-map))))

; (defc= reverse-depth
;   (when closest-depth
;     (- 1100 closest-depth)))

(def sq (m/osc :type :square))
(def tri (m/osc :type :triangle))

(html
  (head
    (title "♫♫♫•dimo•music•♫♫♫"))
  (body
    (h1 "dimo music!")
    ; (button :click #(m/play-note tri {:pitch @reverse-depth}) "click")
    ; (p (text "average depth: ~{average-depth}"))
    (p (text "closest depth: ~{closest-depth}"))
    ; (p (text "1100 - closest depth: ~{reverse-depth}"))

    (hr)

    (h1 "sandbox")

    (p
      (text "square:")
      (button :click #(m/play-note sq {:pitch (+ 100 (rand-int 3000))
                                       :duration 1000})
              "random note")
      (button :click #(m/stop-osc sq) "off"))

    (p
      (text "triangle:")
      (button :click #(m/play-note tri {:pitch (+ 100 (rand-int 3000))
                                        :duration 1000})
              "random note")
      (button :click #(m/play-notes tri [{:pitch 100 :duration :quarter}
                                         {:duration :sixteenth}
                                         {:pitch 200 :duration :quarter}
                                         {:duration :sixteenth}
                                         {:pitch 300 :duration :quarter}
                                         {:duration :sixteenth}
                                         {:pitch 400 :duration :quarter}])
              "note sequence")
      (button :click #(m/stop-osc tri) "off"))

    (p
      (button :click m/stop-all-oscs "stop all oscs"))))

