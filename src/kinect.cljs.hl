(ns dimo.kinect
  (:require [chronoid.core :as c]))

; using a chronoid clock to obtain an accurate 100 ms delay
(def clock (-> (c/clock) c/start!))

(defn process-kinect-depth-map
  "Turns the data coming from the Kinect into a usable array-seq."
  [array-buffer]
  (array-seq (js/Uint16Array. array-buffer)))

(defn depth-map-cell 
  "Sets up a websocket streaming ArrayBuffer data from the Kinect, as well as
   a cell to be updated in real-time (with 100 ms latency for processing) with 
   data from the websocket.

   Returns the cell."
  []
  ; Connects to already-running websocket on port 1337 
  (let [ws (doto (js/WebSocket. "ws://localhost:1337") 
             (aset "binaryType" "arraybuffer")
             (aset "onopen"  #(js/console.log "WebSocket connection established."))
             (aset "onclose" #(js/console.log "WebSocket connection closed.")))
        depth-map (cell nil)]
    (set! (.-onmessage ws)
      (fn [msg] 
        (let [dm (process-kinect-depth-map (.-data msg))]
          (c/set-timeout! clock #(reset! depth-map dm) 100))))
    depth-map))

