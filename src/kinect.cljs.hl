(ns dimo.kinect
  (:require [servant.core    :as servant]
            [cljs.core.async :refer (<!)])
  (:require-macros [cljs.core.async.macros :refer [go]]
                   [servant.macros :refer [defservantfn]]))

; web worker setup

(defservantfn process-kinect-depth-map
  "Turns the data coming from the Kinect into a usable array-seq."
  [array-buffer]
  (array-seq (js/Uint16Array. array-buffer)))

(def worker-count 1)
(def worker-script "/index.html.js")

(defn depth-map-cell 
  "Sets up a websocket streaming ArrayBuffer data from the Kinect, as well as
   a web worker to process the data and turn it into an array-seq.
   
   Returns a cell containing the array-seq, which is updated on each message
   from the websocket."
  []
  ; Connects to already-running websocket on port 1337 
  (let [ws (doto (js/WebSocket. "ws://localhost:1337") 
             (aset "binaryType" "arraybuffer")
             (aset "onopen"  #(js/console.log "WebSocket connection established."))
             (aset "onclose" #(js/console.log "WebSocket connection closed.")))
        servant-channel   (servant/spawn-servants worker-count worker-script)
        depth-map-thread #(servant/servant-thread 
                            servant-channel
                            servant/array-buffer-message-standard-reply
                            process-kinect-depth-map %)
        depth-map (cell nil)]
    (set! (.-onmessage ws)
      #(go
         (let [result-channel (depth-map-thread (.-data %))]
           (reset! depth-map (<! result-channel)))))
    depth-map))

